Assume you are working with list of integers such that  2 adjacent regions
of the list are sorted in ascending order.

   examples:    1,3,0,4
                1,9,11,2,4,6,7,8,9


Your task is to merge the two regions so the result is a list sorted in
ascending order.


1. For the version 1, merge the regions in place. In place, means that you cannot
   use any additional data structures. So the additional space requirement is O(1).

    // precondition: aLow <= bLow and bLow <= bHigh
    //               the data within [aLow, bLow) is sorted in ascending order
    //               the data within [bLow, bHigh) is sorted in ascending order
    // postcondtion : Without using any additional data structure
    //                the data within [aLow, bHigh) is sorted in ascending order
    public static void mergeInPlace(int[] data, int aLow, int bLow, int bHigh){

   }



2. For version 2, merge the regions by copying the list into an additional data structure
   and return the copy of the list.

    // precondtion: aLow <= bLow, bLow <= bHigh
    //              the data within [aLow, bLow) is sorted in ascending order
    //              the data within [bLow, bHigh) is sorted in ascending order
    // postcondition: return of copy of the data in ascending order
    public static int[] merge(int [] data, int aLow, int bLow, int bHigh){
     

    }


3. What is the expected runtime of version 1?

4. What is the expected runtime of version 2?
