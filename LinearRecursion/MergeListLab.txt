1. Merge.java implements two versions of the merge method that works on int arrays.

   a. Implement the same algorithms but for lists of integers.
   b. Save this implementation in the class MergeList.

   c. Remember to include these statements at the top of the class.
   
      import java.util.List;
      import java.util.ArrayList;

   d. Use only AP methods in your implementation.



public class MergeList{

    // precondition: aLow <= bLow and bLow <= bHigh
    //               the data within [aLow, bLow) is sorted in ascending order
    //               the data within [bLow, bHigh) is sorted in ascending order
    // postcondtion : Without using any additional data structure
    //                the data within [aLow, bHigh) is sorted in ascending order
    public static void mergeInPlace(List<Integer> data, int aLow, int bLow, int bHigh){
           // your code goes here
    }
    
	// precondtion: aLow <= bLow, bLow <= bHigh
	//              the data within [aLow, bLow) is sorted in ascending order
	//              the data within [bLow, bHigh) is sorted in ascending order
	// postcondition: return of copy of the data in ascending order
	public static List<Integer> merge(List<Integer> data, int aLow, int bLow, int bHigh){
	  // your code goes here
	}

	public static void main(String [] args){
	    int[] d = {1,3,5,8,2,6,11};
	    List<Integer> data1 = new ArrayList<Integer>();
	    List<Integer> data2 = new ArrayList<Integer>();
	    for (int x : d){
		data1.add(x);
		data2.add(x);
	    }
	
	    System.out.println("****** Merge In Place *******");
	    System.out.println(data1);
	    mergeInPlace(data1,0,4,7);
	    System.out.println(data1);

	    System.out.println("****** Merge  *******");
	    System.out.println(data2);
	    data2 = merge(data2,0,4,7);
	    System.out.println(data2);
	

	}
    


    }
